<!-- DONT EDIT!! Auto-generated by zero-sbt-plugin -->
<scalastyle>
    <name>Scalastyle standard configuration</name>
    <!-- Check that there are no tabs in a file -->
    <check level="error" class="org.scalastyle.file.FileTabChecker" enabled="true"/>
    <!-- Check the number of lines in a file -->
    <check level="error" class="org.scalastyle.file.FileLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxFileLength"><![CDATA[800]]></parameter>
        </parameters>
    </check>
    <!-- Check the first lines of each file matches the text -->
    <check level="error" class="org.scalastyle.file.HeaderMatchesChecker" enabled="false">
        <parameters>
            <parameter name="header">
                <![CDATA[// Copyright (C) 2019 the original author or authors.
// See the LICENCE.txt file distributed with this work for additional
// information regarding copyright ownership.
//]]>
            </parameter>
        </parameters>
    </check>
    <!-- Check that the plus sign is followed by a space -->
    <check level="error" class="org.scalastyle.scalariform.SpacesAfterPlusChecker" enabled="true"/>
    <!-- Check that there is no trailing whitespace at the end of lines -->
    <check level="error" class="org.scalastyle.file.WhitespaceEndOfLineChecker" enabled="true"/>
    <!-- Check that the plus sign is preceded by a space -->
    <check level="error" class="org.scalastyle.scalariform.SpacesBeforePlusChecker" enabled="true"/>
    <!-- Check the number of characters in a line -->
    <check level="error" class="org.scalastyle.file.FileLineLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLineLength"><![CDATA[80]]></parameter>
            <parameter name="tabSize"><![CDATA[4]]></parameter>
        </parameters>
    </check>
    <!-- Check that class names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.ClassNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <!-- Check that object names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.ObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[[A-Z][A-Za-z]*]]></parameter>
        </parameters>
    </check>
    <!-- Check that package object names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.PackageObjectNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z]*$]]></parameter>
        </parameters>
    </check>
    <!-- Check that if a class implements either equals or hashCode, it should implement the other -->
    <check level="error" class="org.scalastyle.scalariform.EqualsHashCodeChecker" enabled="true"/>
    <!-- Check that a class does not import certain classes -->
    <check level="error" class="org.scalastyle.scalariform.IllegalImportsChecker" enabled="true">
        <parameters>
            <parameter name="illegalImports"><![CDATA[sun._,java.awt._]]></parameter>
        </parameters>
    </check>
    <!-- Maximum number of parameters for a method -->
    <check level="error" class="org.scalastyle.scalariform.ParameterNumberChecker" enabled="true">
        <parameters>
            <parameter name="maxParameters"><![CDATA[8]]></parameter>
        </parameters>
    </check>
    <!-- Checks for use of magic numbers -->
    <check level="warning" class="org.scalastyle.scalariform.MagicNumberChecker" enabled="false">
        <parameters>
            <parameter name="ignore"><![CDATA[-1,0,1,2,3]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceBeforeLeftBracketChecker" enabled="true"/>
    <check level="warning" class="org.scalastyle.scalariform.NoWhitespaceAfterLeftBracketChecker" enabled="true"/>
    <!-- Check that return is not used -->
    <check level="error" class="org.scalastyle.scalariform.ReturnChecker" enabled="true"/>
    <!-- Check that null is not used -->
    <check level="error" class="org.scalastyle.scalariform.NullChecker" enabled="true"/>
    <!-- Check that classes and objects do not define the clone() method -->
    <check level="error" class="org.scalastyle.scalariform.NoCloneChecker" enabled="true"/>
    <!-- Check that classes and objects do not define the finalize() method -->
    <check level="error" class="org.scalastyle.scalariform.NoFinalizeChecker" enabled="true"/>
    <!-- Check that classes and objects do not define equals without overriding equals -->
    <check level="error" class="org.scalastyle.scalariform.CovariantEqualsChecker" enabled="true"/>
    <!-- Check that structural types are not used -->
    <check level="warning" class="org.scalastyle.scalariform.StructuralTypeChecker" enabled="true"/>
    <!-- Checks that a regular expression cannot be matched -->
    <check level="error" class="org.scalastyle.file.RegexChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[println|isInstanceOf|asInstanceOf|\.get[\s\.]|\.head[\s\.]]]></parameter>
        </parameters>
    </check>
    <check level="warning" class="org.scalastyle.scalariform.NumberOfTypesChecker" enabled="true">
        <parameters>
            <parameter name="maxTypes"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <!-- Checks that the cyclomatic complexity of a method does exceed a value -->
    <check level="warning" class="org.scalastyle.scalariform.CyclomaticComplexityChecker" enabled="true">
        <parameters>
            <parameter name="maximum"><![CDATA[10]]></parameter>
        </parameters>
    </check>
    <!-- Checks that if a long literal is used, then an uppercase L is used -->
    <check level="true" class="org.scalastyle.scalariform.UppercaseLChecker" enabled="true"/>
    <!-- Boolean expression can be simplified -->
    <check level="warning" class="org.scalastyle.scalariform.SimplifyBooleanExpressionChecker" enabled="true"/>
    <!-- Checks that if statements have braces -->
    <check level="error" class="org.scalastyle.scalariform.IfBraceChecker" enabled="false">
        <parameters>
            <parameter name="singleLineAllowed"><![CDATA[true]]></parameter>
            <parameter name="doubleLineAllowed"><![CDATA[false]]></parameter>
        </parameters>
    </check>
    <!-- Checks that methods do not exceed a maximum length -->
    <check level="warning" class="org.scalastyle.scalariform.MethodLengthChecker" enabled="true">
        <parameters>
            <parameter name="maxLength"><![CDATA[50]]></parameter>
            <parameter name="ignoreComments">true</parameter>
        </parameters>
    </check>
    <!-- Check that method names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.MethodNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
        </parameters>
    </check>
    <!-- Check that a class / trait / object does not have too many methods -->
    <check level="warning" class="org.scalastyle.scalariform.NumberOfMethodsInTypeChecker" enabled="true">
        <parameters>
            <parameter name="maxMethods"><![CDATA[30]]></parameter>
        </parameters>
    </check>
    <!-- Check that a method has an explicit return type, it is not inferred -->
    <check level="error" class="org.scalastyle.scalariform.PublicMethodsHaveTypeChecker" enabled="true"/>
    <!-- Checks that a file ends with a newline character -->
    <check level="error" class="org.scalastyle.file.NewLineAtEofChecker" enabled="true"/>
    <!-- Checks that a file does not end with a newline character -->
    <check level="error" class="org.scalastyle.file.NoNewLineAtEofChecker" enabled="false"/>
    <!-- Checks that lines are indented by a multiple of the tab size -->
    <check level="error" class="org.scalastyle.file.IndentationChecker" enabled="true">
        <parameters>
            <parameter name="tabSize">2</parameter>
            <parameter name="methodParamIndentSize">2</parameter>
            <!-- ideally this should be 2, but we have poor IDE support -->
            <parameter name="classParamIndentSize">2</parameter>
        </parameters>
    </check>
    <!-- Checks that type parameter to a class matches a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.ClassTypeParameterChecker" enabled="false">
        <parameters>
            <parameter name="regex"><![CDATA[^[A-Z_]+$]]></parameter>
        </parameters>
    </check>
    <!-- Checks that block imports are not used -->
    <check level="error" class="org.scalastyle.scalariform.BlockImportChecker" enabled="true"/>
    <!-- Checks that Java @Deprecated is not used, Scala @deprecated should be used instead -->
    <check level="error" class="org.scalastyle.scalariform.DeprecatedJavaChecker" enabled="true"/>
    <!-- If a class/trait has no members, the braces are unnecessary -->
    <check level="error" class="org.scalastyle.scalariform.EmptyClassChecker" enabled="true"/>
    <!-- Check that field names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.FieldNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex"><![CDATA[^[a-z][A-Za-z0-9]*$]]></parameter>
            <parameter name="objectFieldRegex"><![CDATA[^[A-Za-z0-9]+$]]></parameter>
        </parameters>
    </check>
    <!-- Checks that braces are used in for comprehensions -->
    <check level="error" class="org.scalastyle.scalariform.ForBraceChecker" enabled="false"/>
    <!-- Checks that imports are grouped together, not throughout the file -->
    <check level="error" class="org.scalastyle.scalariform.ImportGroupingChecker" enabled="false"/>
    <!-- Checks that imports are grouped and ordered according to the style configuration -->
    <check level="error" class="org.scalastyle.scalariform.ImportOrderChecker" enabled="true">
        <parameters>
            <parameter name="groups">java,sbt,scala,scalalang,others</parameter>
            <parameter name="group.java">javax?\..+</parameter>
            <parameter name="group.scala">sbt\..+</parameter>
            <parameter name="group.scala">scala\..+</parameter>
            <parameter name="group.scalalang">scala.language\..+</parameter>
            <parameter name="group.others">.+</parameter>
        </parameters>
    </check>
    <!-- Checks that a case statement pattern match is not lower case, as this can cause confusion -->
    <check level="warning" class="org.scalastyle.scalariform.LowercasePatternMatchChecker" enabled="true"/>
    <!-- Check that method argument names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.MethodArgumentNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex">^[a-z][A-Za-z0-9]*$</parameter>
            <parameter name="ignoreRegex">^$</parameter>
        </parameters>
    </check>
    <!-- Checks that a string literal does not appear multiple times -->
    <check level="error" class="org.scalastyle.scalariform.MultipleStringLiteralsChecker" enabled="false">
        <parameters>
            <parameter name="allowed">2</parameter>
            <parameter name="ignoreRegex">^\&quot;\&quot;$</parameter>
        </parameters>
    </check>
    <!-- Checks that argument literals are named -->
    <check level="error" class="org.scalastyle.scalariform.NamedArgumentChecker" enabled="false">
        <parameters>
            <parameter name="checkString">false</parameter>
            <parameter name="ignoreMethod">^set.+$</parameter>
        </parameters>
    </check>
    <!-- Checks that the code does not have ??? operators -->
    <check level="error" class="org.scalastyle.scalariform.NotImplementedErrorUsage" enabled="true"/>
    <!-- Checks that Java @Override is not used -->
    <check level="error" class="org.scalastyle.scalariform.OverrideJavaChecker" enabled="true"/>
    <!-- Check that package names match a regular expression -->
    <check level="error" class="org.scalastyle.scalariform.PackageNamesChecker" enabled="true">
        <parameters>
            <parameter name="regex">^[a-z][A-Za-z]*$</parameter>
        </parameters>
    </check>
    <!-- Use a : Unit = for procedure declarations -->
    <check level="error" class="org.scalastyle.scalariform.ProcedureDeclarationChecker" enabled="true"/>
    <!-- Checks that if expressions are not redundant, i.e. easily replaced by a variant of the condition -->
    <check level="warning" class="org.scalastyle.scalariform.RedundantIfChecker" enabled="true"/>
    <!-- Checks that classes and objects do not define mutable fields -->
    <check level="warning" class="org.scalastyle.scalariform.VarFieldChecker" enabled="true"/>
    <!-- Checks that functions do not define mutable variables -->
    <check level="warning" class="org.scalastyle.scalariform.VarLocalChecker" enabled="true"/>
    <!-- Checks that while is not used -->
    <check level="error" class="org.scalastyle.scalariform.WhileChecker" enabled="true"/>
    <!-- Checks that the ScalaDoc on documentable members is well-formed -->
    <check level="warning" class="org.scalastyle.scalariform.ScalaDocChecker" enabled="true">
        <parameters>
            <parameter name="ignoreRegex">(.*Spec$)|(.*Test$)</parameter>
            <parameter name="ignoreTokenTypes">PatDefOrDcl,TypeDefOrDcl,FunDefOrDcl,TmplDef</parameter>
            <parameter name="indentStyle">scaladoc</parameter>
        </parameters>
    </check>
    <!-- Checks a space after the start of the comment -->
    <check level="error" class="org.scalastyle.scalariform.SpaceAfterCommentStartChecker" enabled="true"/>
    <!-- Ensure single space after certain token(s) -->
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COLON, IF, EQUALS</parameter>
        </parameters>
    </check>
    <!-- Ensure single space before certain token(s) -->
    <check level="error" class="org.scalastyle.scalariform.EnsureSingleSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">EQUALS</parameter>
        </parameters>
    </check>
    <!-- Disallow space after certain token(s) -->
    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceAfterTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">LPAREN</parameter>
        </parameters>
    </check>
    <!-- Disallow space before certain token(s) -->
    <check level="error" class="org.scalastyle.scalariform.DisallowSpaceBeforeTokenChecker" enabled="true">
        <parameters>
            <parameter name="tokens">COMMA, RPAREN</parameter>
        </parameters>
    </check>
</scalastyle>
